name: 'Build and Release'

on:
  push:
    tags:
      - 'v*'
      - 'v*.*'  
      - 'v*.*.*'
    branches:
      - release
  create:
    # This will trigger when tags are created via GitHub Actions
  workflow_dispatch:
    # Allow manual trigger for testing

# This workflow will trigger when a version tag is pushed or when pushing to release branch.

jobs:
  build-and-release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag (if tag triggered)
        if: startsWith(github.ref, 'refs/tags/')
        id: extract_version_tag
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Triggered by tag: v$VERSION"

      - name: Extract version from Cargo.toml (if branch triggered)
        if: startsWith(github.ref, 'refs/heads/')
        id: extract_version_branch
        shell: bash
        run: |
          VERSION=$(grep '^version = ' src-tauri/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Triggered by branch, extracted version: $VERSION"

      - name: Set final version
        id: extract_version
        shell: bash
        run: |
          if [ "${{ steps.extract_version_tag.outputs.version }}" != "" ]; then
            VERSION="${{ steps.extract_version_tag.outputs.version }}"
          else
            VERSION="${{ steps.extract_version_branch.outputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - name: Generate release notes
        id: release_notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.sha }})
          RELEASE_NOTES="Release $TAG_NAME

          Version: ${{ steps.extract_version.outputs.version }}
          
          Changes:
          $COMMIT_MESSAGE"
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.BUILD_SECRET_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.BUILD_PASSWORD }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'yt-dlp-GUI v__VERSION__'
          releaseBody: ${{ steps.release_notes.outputs.release_notes }}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}